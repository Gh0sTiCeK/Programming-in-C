#include <stdio.h>

int main(){
// ARITMETIC
//----+--------------------------------------------------------------+-------------+
//    | Descrition                                                   | Example     |
//----+--------------------------------------------------------------+-------------+
// +  |	Adds two operands.                                           | A + B = 30  |
// -  |	Subtracts second operand from the first.                     | A - B = -10 |
// *  |	Multiplies both operands.                                    | A * B = 200 |
// /  |	Divides numerator by de-numerator.                           | B / A = 2   |
// %  |	Modulus Operator and remainder of after an integer division. | B % A = 0   |
// ++ |	Increment operator increases the integer value by one.       | A++ = 11    |
// -- |	Decrement operator decreases the integer value by one.       | A-- = 9     |
//----+--------------------------------------------------------------+-------------+
// RELATIONAL
//----+--------------------------------------------------------------------------------------------------------------------------------------+----------------------+
//    | Descrition                                                                                                                           | Example              |
//----+--------------------------------------------------------------------------------------------------------------------------------------+----------------------+
// == |	Checks if the values of two operands are equal or not. If yes, then the condition becomes true.                                      | (A == B) is not true |
// != |	Checks if the values of two operands are equal or not. If the values are not equal, then the condition becomes true.	             | (A != B) is true     |
// >  |	Checks if the value of left operand is greater than the value of right operand. If yes, then the condition becomes true.	     | (A > B) is not true  |
// <  |	Checks if the value of left operand is less than the value of right operand. If yes, then the condition becomes true.	             | (A < B) is true      |
// >= |	Checks if the value of left operand is greater than or equal to the value of right operand. If yes, then the condition becomes true. | (A >= B) is not true | 
// <= |	Checks if the value of left operand is less than or equal to the value of right operand. If yes, then the condition becomes true.    | (A <= B) is true     |
//----+--------------------------------------------------------------------------------------------------------------------------------------+----------------------+
// LOGICAL
//----+--------------------------------------------------------------------------------------------------------------------------------------+----------------------+
//    | Descrition                                                                                                                           | Example              |
//----+--------------------------------------------------------------------------------------------------------------------------------------+----------------------+
// && |	Called Logical AND operator. If both the operands are non-zero, then the condition becomes true.                                     | (A && B) is false    |
// || |	Called Logical OR Operator. If any of the two operands is non-zero, then the condition becomes true.                                 | (A || B) is true     |
// !  |	Called Logical NOT Operator. It is used to reverse the logical state of its operand.                                                 | !(A && B) is true    |
//----+--------------------------------------------------------------------------------------------------------------------------------------+----------------------+
// ASSIGMENT
//----+--------------------------------------------------------------------------------------------------------------------------------------+----------------------+
//    | Descrition                                                                                                                           | Example              |
//----+--------------------------------------------------------------------------------------------------------------------------------------+----------------------+
// =  |	Simple assignment operator. Assigns values from right side operands to left side operand                                             | C = A -> val A to C  |
// += |	Add AND assignment operator. It adds the right operand to the left operand and assign the result to the left operand.                | C += A -> C = C + A  |
// -= |	Subtract AND assignment operator. It subtracts the right operand from the left operand and assigns the result to the left operand.   | C -= A -> C = C - A  |
// *= |	Multiply AND assignment operator. It multiplies the right operand with the left operand and assigns the result to the left operand   | C *= A -> C = C * A  |
// /= |	Divide AND assignment operator. It divides the left operand with the right operand and assigns the result to the left operand.	     | C /= A -> C = C / A  |
// %= |	Modulus AND assignment operator. It takes modulus using two operands and assigns the result to the left operand.	             | C %= A -> C = C % A  |
//----+--------------------------------------------------------------------------------------------------------------------------------------+----------------------+
tables from: https://www.tutorialspoint.com/cprogramming/c_operators.htm

int a = 5;
int b = 3;
printf("%d + %d = %d \n", a,b,a+b);
a -= 4; // 5 - 4
printf("%d \n",a); //output: 1

if(a > 0 && a <10){
	printf("Value of variable b is: %d",b);
}
return 0;
}
